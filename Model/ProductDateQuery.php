<?php

namespace DeliveryDate\Model;

use DeliveryDate\Model\Base\ProductDateQuery as BaseProductDateQuery;
use Propel\Runtime\ActiveQuery\Criteria;
use Thelia\Model\Product;

/**
 * Skeleton subclass for performing query and update operations on the 'product_date' table.
 *
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 */
class ProductDateQuery extends BaseProductDateQuery
{
    /**
     * @param  Product $product
     * @return array
     */
    public function getProductDates(Product $product)
    {
        $ids = static::create()->select('id')->find();
        $request_ids = array();

        foreach ($product->getProductSaleElementss() as $sale_element) {
            if (!in_array($sale_element->getId(), $ids->getData())) {
                $local = new ProductDate();
                $local->setId($sale_element->getId())->save();
            }
            $request_ids[] = $sale_element->getId();
        }

        $ret = $this->findPks($request_ids);

        return $ret;
    }

    /**
     * @param  null             $id
     * @param  null             $comparison
     * @return ProductDateQuery
     */
    public function filterById($id = null, $comparison = null)
    {
        $query = parent::filterById($id, $comparison); // TODO: Change the autogenerated stub
        if ($query->findOne() === null) {
            $query = ProductDateQuery::create()->
                filterById(0, Criteria::EQUAL);
        }

        return $query;
    }

    /**
     * @param  mixed             $key
     * @param  null              $con
     * @return ProductDate|array
     */
    public function findPk($key, $con = null)
    {
        $query = parent::findPk($key, $con); // TODO: Change the autogenerated stub

        if ($query === null) {
            $query = $this->getDefault();
        }
        $query->setRealId($key);

        return $query;
    }

    /**
     * @return array|ProductDate|mixed
     * @throws \Exception
     */
    public function getDefault()
    {
        $query = parent::findPk(0);

        if ($query === null) {
            throw new \Exception("Default value has to be set before using the plugin");
        }

        return $query;
    }

} // ProductDateQuery
